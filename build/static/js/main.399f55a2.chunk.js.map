{"version":3,"sources":["components/Video.js","reducers/streamReducer.js","reducers/gameReducer.js","reducers/index.js","actions/types.js","store.js","helpers/handleSocketMsg.js","components/Landing.js","App.js","actions/streamActions.js","serviceWorker.js","index.js"],"names":["Video","stream","id","game","useEffect","document","getElementById","srcObject","className","autoPlay","playsInline","initialState","combineReducers","streams","state","action","type","payload","socketId","names","newState","Object","keys","forEach","streamName","foundName","find","nameObj","toId","name","totalPlayers","afoot","allPlayersJoined","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","socketMessages","connections","createStreamConnection","connectionId","console","log","RTCPeerConnection","iceServers","urls","getState","getTracks","track","addTrack","ontrack","e","dispatch","msg","localStream","socket","addStreams","a","fromId","addIceCandidate","RTCIceCandidate","candidate","createOffer","offer","setLocalDescription","emit","description","localDescription","onicecandidate","event","setRemoteDescription","createAnswer","answer","turnOnLocalMedia","navigator","mediaDevices","getUserMedia","audio","video","connect","useState","makingGame","setMakingGame","joiningGame","setJoiningGame","joinRoomName","setJoinRoomName","makeRoomName","setMakeRoomName","numPlayers","setNumPlayers","roomName","onClick","prev","style","height","htmlFor","onChange","Number","target","value","placeholder","createStream","n","setSocket","nameToGuess","setNameToGuess","io","location","hostname","on","handleSocketMsg","filter","map","i","key","length","Array","fill","Boolean","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.399f55a2.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './video.scss';\r\n\r\nfunction Video({ stream, id, game }) {\r\n\tuseEffect(() => {\r\n\t\tdocument.getElementById(id).srcObject = stream;\r\n\t}, [stream]);\r\n\r\n\treturn (\r\n\t\t<div className=\"video-container\">\r\n\t\t\t<video id={id} autoPlay playsInline></video>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Video;\r\n","import { NEW_STREAM, GOT_NAMES } from '../actions/types';\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action){\r\n  switch(action.type){\r\n    case NEW_STREAM:\r\n      const {stream, socketId} = action.payload;\r\n      return {...state, [socketId]: {stream}}\r\n    case GOT_NAMES:\r\n      const {names} = action.payload;\r\n      const newState = {};\r\n      Object.keys(state).forEach(streamName => {\r\n        const foundName = names.find(nameObj => nameObj.toId === streamName);\r\n        newState[streamName] = {...state[streamName], name: foundName && foundName.name}\r\n      });\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { NEW_GAME, ALL_PLAYERS_JOINED } from '../actions/types';\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action){\r\n  switch(action.type){\r\n    case NEW_GAME:\r\n      const {name, totalPlayers, afoot} = action.payload;\r\n      return {name, totalPlayers, afoot}\r\n    case ALL_PLAYERS_JOINED:\r\n      return {...state, allPlayersJoined: true}\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport streamReducer from './streamReducer';\r\nimport gameReducer from './gameReducer';\r\n\r\nexport default combineReducers({\r\n  streams: streamReducer,\r\n  game: gameReducer\r\n});","export const NEW_STREAM = 'NEW_STREAM';\r\nexport const NEW_GAME = 'NEW_GAME';\r\nexport const ALL_PLAYERS_JOINED = 'ALL_PLAYERS_JOINED';\r\nexport const GOT_NAMES = 'GOT_NAMES';","import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import store from '../store';\r\nimport { NEW_GAME, NEW_STREAM, ALL_PLAYERS_JOINED, GOT_NAMES } from '../actions/types';\r\n\r\n\r\nconst socketMessages = {\r\n  iceCandidate: 'iceCandidate',\r\n  joinRequest: 'joinRequest',\r\n  offer: 'offer',\r\n  answer: 'answer',\r\n  badRoomName: 'cannot join',\r\n  ready: 'gameReady',\r\n  gotNames: 'give names',\r\n  nameTaken: 'name taken',\r\n  roomNameOk: 'room name ok',\r\n  joining: 'joining'\r\n}\r\n\r\nconst connections = {};\r\n\r\nfunction feedLocalStream(stream, connectionId){\r\n  stream.getTracks().forEach(track => {\r\n    connections[connectionId].addTrack(track, stream);\r\n  });   \r\n}\r\n\r\nfunction createStreamConnection(socketId){\r\n  console.log('csc ran')\r\n  connections[socketId] = new RTCPeerConnection({iceServers: [{urls: 'stun:stun.l.google.com:19302'}]});\r\n  feedLocalStream(store.getState().streams['local'].stream, socketId);\r\n  connections[socketId].ontrack = e => store.dispatch({type: NEW_STREAM, payload: {stream: e.streams[0], socketId}});\r\n}\r\n\r\nexport default async function(msg, localStream, socket, addStreams){\r\n  console.log(msg)\r\n  switch (msg.type) {\r\n    //Server sending ICE candidate, add to connection\r\n    case socketMessages.iceCandidate:\r\n      return connections[msg.fromId].addIceCandidate(new RTCIceCandidate(msg.candidate))\r\n\r\n    //Received join request, create connection and attach stream, create offer, set and send description\r\n    case socketMessages.joinRequest: \r\n      createStreamConnection(msg.fromId, localStream, addStreams)\r\n      const offer = await connections[msg.fromId].createOffer()\r\n      await connections[msg.fromId].setLocalDescription(offer)\r\n      return socket.emit('description', {description: connections[msg.fromId].localDescription, toId: msg.fromId, fromId: socket.id});\r\n    \r\n    //recieved offer, create connection, add candidate handler, set description, set and send answer\r\n    case socketMessages.offer:\r\n      createStreamConnection(msg.fromId, localStream, addStreams)\r\n      connections[msg.fromId].onicecandidate = function(event){\r\n        if(event.candidate){\r\n          socket.emit('iceCandidate', {candidate: event.candidate, fromId: msg.toId, toId: msg.fromId})\r\n        }\r\n        //TODO: might need some cleanup here if candidate null\r\n      }\r\n      await connections[msg.fromId].setRemoteDescription(msg.description);\r\n      const answer = await connections[msg.fromId].createAnswer();\r\n      await connections[msg.fromId].setLocalDescription(answer);\r\n      return socket.emit('answer', {answer, toId: msg.fromId, fromId: socket.id});\r\n    \r\n    //received answer, set description\r\n    case socketMessages.answer:\r\n      socket.emit('ready', store.getState().game.name)\r\n      return await connections[msg.fromId].setRemoteDescription(msg.answer);\r\n      \r\n    case socketMessages.badRoomName:\r\n      return console.log('handle room name here')\r\n\r\n    case socketMessages.gotNames:\r\n      console.log('got names', msg.names)\r\n      return store.dispatch({type: GOT_NAMES, payload: {names: msg.names}})\r\n      // return addStreamNames(msg.names);\r\n\r\n    case socketMessages.nameTaken:\r\n      return console.log('name taken')\r\n\r\n    case socketMessages.roomNameOk:\r\n      let {name, totalPlayers} = msg;\r\n      return store.dispatch({type: NEW_GAME, payload: {name, totalPlayers, afoot: true}})\r\n\r\n    case socketMessages.ready:\r\n      console.log('all ready boss')\r\n      return store.dispatch({type: ALL_PLAYERS_JOINED})\r\n\r\n    case socketMessages.joining:{\r\n      let {totalPlayers, name} = msg;\r\n      return store.dispatch({type: NEW_GAME, payload: {name, totalPlayers, afoot: true}})\r\n    }\r\n    \r\n    default:\r\n      console.log('no handling for server socket emit: ')\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './landing.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nasync function turnOnLocalMedia(addStreams) {\r\n\t//Setup media\r\n\tconst stream = await navigator.mediaDevices.getUserMedia({\r\n\t\taudio: false,\r\n\t\tvideo: true\r\n\t});\r\n\r\n\t//Connect stream to html and notify server\r\n\taddStreams(stream, 'local');\r\n}\r\n\r\nfunction Landing({ game, addStreams, socket }) {\r\n\tconst [makingGame, setMakingGame] = useState(false);\r\n\tconst [joiningGame, setJoiningGame] = useState(false);\r\n\tconst [joinRoomName, setJoinRoomName] = useState('');\r\n\tconst [makeRoomName, setMakeRoomName] = useState('');\r\n\tconst [numPlayers, setNumPlayers] = useState(2);\r\n\r\n\tfunction toggleMakeGame() {\r\n\t\tsetMakingGame((prev) => !prev);\r\n\t}\r\n\r\n\tasync function makeRoom() {\r\n\t\t//Verify number of players set\r\n\t\tif (!numPlayers) {\r\n\t\t\treturn console.log('Need to add players');\r\n\t\t}\r\n\t\tsocket.emit('make room', { name: makeRoomName, totalPlayers: numPlayers });\r\n\t\tturnOnLocalMedia(addStreams);\r\n\t}\r\n\r\n\tasync function joinRoom() {\r\n\t\t//Tell server, wait\r\n\t\tawait turnOnLocalMedia(addStreams);\r\n\t\tsocket.emit('join room', { roomName: joinRoomName, fromId: socket.id });\r\n\t}\r\n\r\n\tfunction toggleJoinGame() {\r\n\t\tsetJoiningGame((prev) => !prev);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{!game.afoot && (\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"landing-button\" onClick={toggleMakeGame}>\r\n\t\t\t\t\t\t\tCreate Game\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"input-slider\"\r\n\t\t\t\t\t\t\tstyle={{ height: makingGame ? '100px' : '0px' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div className=\"player-number\">\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"players-number\">Total Players: </label>\r\n\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\tid=\"players-number\"\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setNumPlayers(Number(e.target.value))}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<option>2</option>\r\n\t\t\t\t\t\t\t\t\t<option>3</option>\r\n\t\t\t\t\t\t\t\t\t<option>4</option>\r\n\t\t\t\t\t\t\t\t\t<option>5</option>\r\n\t\t\t\t\t\t\t\t\t<option>6</option>\r\n\t\t\t\t\t\t\t\t\t<option>7</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className=\"game-name\">\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\tsetMakeRoomName(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\twindow.roomName = e.target.value;\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter game name\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<button onClick={makeRoom}>Go!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"landing-button\" onClick={toggleJoinGame}>\r\n\t\t\t\t\t\t\tJoin Game\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"input-slider\"\r\n\t\t\t\t\t\t\tstyle={{ height: joiningGame ? '100px' : '0px' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div className=\"game-name\">\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\tsetJoinRoomName(e.target.value);\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<button onClick={joinRoom}>Go!</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tstreams: state.streams,\r\n\tgame: state.game\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Landing);\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.scss\";\r\nimport Video from \"./components/Video\";\r\nimport handleSocketMsg from \"./helpers/handleSocketMsg\";\r\nimport io from \"socket.io-client\";\r\nimport Landing from \"./components/Landing\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStream } from \"./actions/streamActions\";\r\n\r\nlet localStream;\r\n\r\nfunction App({ streams, game, createStream }) {\r\n  const [socket, setSocket] = useState();\r\n  const [nameToGuess, setNameToGuess] = useState();\r\n\r\n  useEffect(() => {\r\n    // const socket = io.connect(\"http://192.168.0.100:3001\")\r\n    const socket = io.connect(window.location.hostname);\r\n    // const socket = io.connect('/')\r\n    // let socket = io.connect(\"http://localhost:3001\")\r\n    socket.on(\"message\", msg => {\r\n      handleSocketMsg(msg, localStream, socket, addStreams);\r\n    });\r\n    setSocket(socket);\r\n  }, []);\r\n\r\n  function addStreams(stream, socketId) {\r\n    createStream({ stream, socketId });\r\n  }\r\n\r\n  function setName() {\r\n    socket.emit(\"setName\", { nameToGuess, roomName: game.name });\r\n  }\r\n\r\n  function times(n) {\r\n    return new Array(n).fill(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <h1>Headbandz</h1>\r\n        <Landing addStreams={addStreams} socket={socket} />\r\n        {game.allPlayersJoined && (\r\n          <>\r\n            <input type=\"text\" onChange={e => setNameToGuess(e.target.value)} />\r\n            <button onClick={setName}>Set name</button>\r\n          </>\r\n        )}\r\n        {game.afoot && (\r\n          <div>\r\n            <div className=\"videos-container\">\r\n              <h2>In room: {game.name}</h2>\r\n              <Video\r\n                id=\"local\"\r\n                stream={streams[\"local\"] && streams[\"local\"].stream}\r\n              />\r\n              {Object.keys(streams)\r\n                .filter(streamName => streamName !== \"local\")\r\n                .map((streamName, i) => (\r\n                  <div>\r\n                    <Video\r\n                      stream={streams[streamName].stream}\r\n                      key={i}\r\n                      id={`stream${i}`}\r\n                    />\r\n                    <h3>{streamName}</h3>\r\n                    <h3>{streams[streamName].name}</h3>\r\n                  </div>\r\n                ))}\r\n              {game.totalPlayers &&\r\n                times(game.totalPlayers - Object.keys(streams).length).map(\r\n                  (a, i) => (\r\n                    <div className=\"video-container\" key={i}>\r\n                      Waiting for player\r\n                    </div>\r\n                  )\r\n                )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  streams: state.streams,\r\n  game: state.game,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createStream })(App);\r\n","import { NEW_STREAM } from './types';\r\n\r\nexport const createStream = stream => dispatch => {\r\n  dispatch({\r\n      type: NEW_STREAM,\r\n      payload: stream\r\n    });\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider, connect } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<React.StrictMode>\r\n\t\t\t<App />\r\n\t\t</React.StrictMode>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}