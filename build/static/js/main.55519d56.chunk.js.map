{"version":3,"sources":["components/Video.js","helpers/handleSocketMsg.js","components/Landing.js","App.js","reducers/streamReducer.js","reducers/index.js","actions/types.js","store.js","actions/streamActions.js","serviceWorker.js","index.js"],"names":["Video","stream","id","useEffect","document","getElementById","srcObject","className","autoPlay","playsInline","socketMessages","connections","createStreamConnection","socketId","localStream","addStreams","connectionId","RTCPeerConnection","getTracks","forEach","track","addTrack","ontrack","e","streams","msg","socket","room","addStreamNames","setGameOn","numPlayers","a","console","log","type","fromId","addIceCandidate","RTCIceCandidate","candidate","createOffer","offer","setLocalDescription","emit","description","localDescription","toId","onicecandidate","event","setRemoteDescription","createAnswer","answer","window","roomName","names","dispatchEvent","Event","current","players","turnOnLocalMedia","name","setRoom","navigator","mediaDevices","getUserMedia","audio","video","Landing","setNumPlayers","useState","makingGame","setMakingGame","joiningGame","setJoiningGame","setBegin","joinRoomName","setJoinRoomName","makeRoomName","setMakeRoomName","totalPlayers","Number","addEventListener","onClick","prev","style","height","htmlFor","onChange","target","value","placeholder","initialState","combineReducers","state","action","item","payload","middleware","thunk","store","createStore","rootReducer","applyMiddleware","connect","createStream","props","setSocket","setStreams","emptyVideos","setEmptyVideos","gameOn","useRef","newStreams","streamObj","matchingName","find","push","fullVideos","length","Array","fill","io","on","handleSocketMsg","slice","map","i","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55519d56.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './video.css'\n\nfunction Video({ stream, id }) {\n  useEffect(() => {\n    document.getElementById(id).srcObject = stream;\n  }, [stream])\n\n  return (\n    <div className=\"video-container\">\n      <video id={id} autoPlay playsInline></video>\n    </div>\n  )\n}\n\nexport default Video;\n","\nconst socketMessages = {\n  iceCandidate: 'iceCandidate',\n  joinRequest: 'joinRequest',\n  offer: 'offer',\n  answer: 'answer',\n  badRoomName: 'cannot join',\n  ready: 'gameReady',\n  gotNames: 'give names',\n  nameTaken: 'name taken',\n  roomNameOk: 'room name ok',\n  joining: 'joining'\n}\n\nconst connections = {};\n\nfunction feedLocalStream(stream, connectionId){\n  stream.getTracks().forEach(track => {\n    connections[connectionId].addTrack(track, stream);\n  });   \n}\n\nfunction createStreamConnection(socketId, localStream, addStreams){\n  connections[socketId] = new RTCPeerConnection(null);\n  feedLocalStream(localStream, socketId);\n  connections[socketId].ontrack = e => addStreams(e.streams[0], socketId);\n}\n\nexport default async function(msg, localStream, socket, addStreams, room, addStreamNames, setGameOn, numPlayers){\n  console.log(msg)\n  switch (msg.type) {\n    //Server sending ICE candidate, add to connection\n    case socketMessages.iceCandidate:\n      return connections[msg.fromId].addIceCandidate(new RTCIceCandidate(msg.candidate))\n\n    //Received join request, create connection and attach stream, create offer, set and send description\n    case socketMessages.joinRequest:\n      createStreamConnection(msg.fromId, localStream, addStreams)\n      const offer = await connections[msg.fromId].createOffer()\n      await connections[msg.fromId].setLocalDescription(offer)\n      return socket.emit('description', {description: connections[msg.fromId].localDescription, toId: msg.fromId, fromId: socket.id});\n    \n    //recieved offer, create connection, add candidate handler, set description, set and send answer\n    case socketMessages.offer:\n      createStreamConnection(msg.fromId, localStream, addStreams)\n      connections[msg.fromId].onicecandidate = function(event){\n        if(event.candidate){\n          socket.emit('iceCandidate', {candidate: event.candidate, fromId: msg.toId, toId: msg.fromId})\n        }\n      }\n      await connections[msg.fromId].setRemoteDescription(msg.description);\n      const answer = await connections[msg.fromId].createAnswer();\n      await connections[msg.fromId].setLocalDescription(answer);\n      return socket.emit('answer', {answer, toId: msg.fromId, fromId: socket.id});\n    \n    //received answer, set description\n    case socketMessages.answer:\n      console.log(window.roomName)\n      socket.emit('ready', window.roomName)\n      return await connections[msg.fromId].setRemoteDescription(msg.answer);\n      \n    case socketMessages.badRoomName:\n      return console.log('handle room name here')\n\n    case socketMessages.gotNames:\n      return addStreamNames(msg.names);\n\n    case socketMessages.nameTaken:\n      return console.log('name taken')\n\n    case socketMessages.roomNameOk:\n      return window.dispatchEvent(new Event('makeRoom'))\n\n    case socketMessages.ready:\n      return window.dispatchEvent(new Event('gameReady'))\n\n    case socketMessages.joining:\n      numPlayers.current = msg.players;\n      return setGameOn(true);\n    \n    default:\n      console.log('no handling for server socket emit: ')\n  }\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./landing.css\";\n\nasync function turnOnLocalMedia(addStreams, name, setRoom) {\n  //Setup media\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: true,\n  });\n\n  //Connect stream to html and notify server\n  addStreams(stream, \"local\");\n}\n\nfunction Landing({ addStreams, socket, setNumPlayers, setRoom, setGameOn, numPlayers }) {\n  const [makingGame, setMakingGame] = useState(false);\n  const [joiningGame, setJoiningGame] = useState(false);\n  const [begin, setBegin] = useState(false);\n  const [joinRoomName, setJoinRoomName] = useState(\"\");\n  const [makeRoomName, setMakeRoomName] = useState(\"\");\n  const [nameToGuess, setNameToGuess] = useState(\"\");\n\n  useEffect(() => {\n    window.addEventListener(\"gameReady\", () => setBegin(true));\n    window.addEventListener(\"makeRoom\", async () => {\n      await turnOnLocalMedia(addStreams, \"local\");\n      console.log('setting room')\n      setRoom(window.roomName);\n      setGameOn(true);\n    });\n  }, []);\n\n  function toggleMakeGame() {\n    setMakingGame((prev) => !prev);\n  }\n\n  async function makeRoom() {\n    //Verify number of players set\n    if (!numPlayers) {\n      return console.log(\"Need to add players\");\n    }\n    socket.emit(\"make room\", { name: makeRoomName, totalPlayers: Number(numPlayers.current) });\n  }\n\n  async function joinRoom() {\n    //Tell server, wait\n    await turnOnLocalMedia(addStreams);\n    setRoom(joinRoomName);\n    window.roomName = joinRoomName;\n    socket.emit(\"join room\", { roomName: joinRoomName, fromId: socket.id });\n  }\n\n  function setGameName(event) {\n    socket.emit(\"setName\", {\n      nameToGuess,\n      roomName: makeRoomName || joinRoomName,\n    });\n  }\n\n  function toggleJoinGame() {\n    setJoiningGame((prev) => !prev);\n  }\n\n  return (\n    <div className=\"container\">\n      <div>\n        <button className=\"landing-button\" onClick={toggleMakeGame}>\n          Create Game\n        </button>\n        <div\n          className=\"input-slider\"\n          style={{ height: makingGame ? \"80px\" : \"0px\" }}\n        >\n          <div className=\"player-number\">\n            <label htmlFor=\"players-number\">Total Players: </label>\n            <select id=\"players-number\" onChange={e => numPlayers.current = (Number(e.target.value))}>\n              <option>2</option>\n              <option>3</option>\n              <option>4</option>\n              <option>5</option>\n              <option>6</option>\n              <option>7</option>\n            </select>\n          </div>\n\n          <div className=\"game-name\">\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                setMakeRoomName(e.target.value);\n                window.roomName = e.target.value;\n              }}\n              placeholder=\"Enter game name\"\n            />\n            <button onClick={makeRoom}>Go!</button>\n          </div>\n        </div>\n      </div>\n      <div>\n        <button className=\"landing-button\" onClick={toggleJoinGame}>\n          Join Game\n        </button>\n        <div\n          className=\"input-slider\"\n          style={{ height: joiningGame ? \"80px\" : \"0px\" }}\n        >\n          <div className=\"game-name\">\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                setJoinRoomName(e.target.value);\n                window.roomName = e.target.value;\n              }}\n            />\n            <button onClick={joinRoom}>Go!</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Landing;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Video from './components/Video'\nimport handleSocketMsg from \"./helpers/handleSocketMsg\";\nimport io from 'socket.io-client';\nimport Landing from './components/Landing'\nimport { Provider, connect } from 'react-redux';\nimport store from './store';\nimport { createStream } from './actions/streamActions'\n\n\nlet localStream;\n\nfunction App(props) {\n  const [socket, setSocket] = useState();\n  const [streams, setStreams] = useState([]);\n  const [emptyVideos, setEmptyVideos] = useState([]);\n  // const [streams, setStreams] = useState([]);\n  const [room, setRoom] = useState('');\n  const [gameOn, setGameOn] = useState(false);\n  const numPlayers = useRef(2);\n  \n  useEffect(() => {\n    // const socket = io.connect(\"http://192.168.0.100:3001\")\n    // const socket = io.connect(window.location.hostname)\n    const socket = io.connect('/')\n    socket.on('message', msg => {\n      handleSocketMsg(msg, localStream, socket, addStreams, room, addStreamNames, setGameOn, numPlayers)\n    });\n    setSocket(socket);\n  }, []); \n\n  function addStreamNames(names){\n    setStreams(prev => {\n      const newStreams = [];\n      prev.forEach(streamObj => {\n        const matchingName = names.find(name => name.toId === streamObj.socketId);\n        newStreams.push({...streamObj, name: matchingName && matchingName.name})\n      });\n      return newStreams;\n    });\n  }\n\n  function logStreams(){\n    console.log(streams);\n  }\n\n  function addStreams(stream, socketId){\n    let fullVideos;\n    setStreams(prev => {\n      if(prev.length === 0){\n        localStream = stream;\n      }\n      fullVideos = prev.length + 1;\n      return [...prev, {stream, socketId}]\n    });\n    setEmptyVideos(prev => new Array(numPlayers.current - fullVideos).fill(0));\n    // props.createStream({stream, socketId})\n  }\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <main>\n          <h1>Headbandz</h1>\n          {!gameOn && <Landing addStreams={addStreams} socket={socket} setRoom={setRoom} setGameOn={setGameOn} numPlayers={numPlayers}/>}\n          {gameOn && \n            <div>\n              <div className=\"videos-container\">\n                <h2>In room: {room}</h2>\n                <Video id=\"local\" stream={streams[0] && streams[0].stream}/>\n              {streams.slice(1).map((stream,i) => \n                <div>\n                  <Video stream={stream.stream} key={i} id={`stream${i}`}/>\n                  <h3>{stream.name}</h3>\n                </div>\n              )}\n              {emptyVideos.map(() => \n                <div className='video-container'>\n                </div> \n              )}\n              </div>\n            </div>\n          }\n          <button onClick={logStreams}>log streams</button>\n        </main>\n      </div>\n    </Provider>\n  );\n}\n\nexport default connect({}, {createStream})(App);\n// export default App;\n","import { NEW_STREAM} from '../actions/types';\n\nconst initialState = {\n  streams: []\n}\n\nexport default function(state = initialState, action){\n  switch(action.type){\n    case NEW_STREAM:\n      return {\n        ...state, \n        item: action.payload\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport streamReducer from './streamReducer';\n\nexport default combineReducers({\n  streams: streamReducer\n});","export const NEW_STREAM = 'NEW_STREAM';","import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleware)\n);\n\nexport default store;\n","import { NEW_STREAM } from './types';\n\n// export const fetchPosts = () => dispatch => {\n//     fetch('https://jsonplaceholder.typicode.com/posts')\n//     .then(res => res.json())\n//     .then(posts => dispatch({\n//       type: FETCH_POSTS,\n//       payload: posts\n//     }));\n// }\n\nexport const createStream = stream => ({\n  type: NEW_STREAM,\n  stream\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}